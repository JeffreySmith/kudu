commit 5fa72c2724941b76cdb0fef04b2d36b2e1ab6bb3
Author: Attila Bukor <abukor@cloudera.com>
Date:   Wed Jul 9 19:28:48 2025 +0200

    Add support for requiring TLS 1.3

diff --git a/squeasel.c b/squeasel.c
index ff40dcc..eeab9e7 100644
--- a/squeasel.c
+++ b/squeasel.c
@@ -170,6 +170,7 @@ static const char *http_500_error = "Internal Server Error";
 #endif
 
 #define OPENSSL_MIN_VERSION_WITH_TLS_1_1 0x10001000L
+#define OPENSSL_MIN_VERSION_WITH_TLS_1_3 0x10101000L
 
 static const char *month_names[] = {
   "Jan", "Feb", "Mar", "Apr", "May", "Jun",
@@ -230,7 +231,7 @@ enum {
   GLOBAL_PASSWORDS_FILE, INDEX_FILES, ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST,
   EXTRA_MIME_TYPES, LISTENING_PORTS, DOCUMENT_ROOT, SSL_CERTIFICATE, SSL_PRIVATE_KEY,
   SSL_PRIVATE_KEY_PASSWORD, SSL_GLOBAL_INIT, NUM_THREADS, RUN_AS_USER, REWRITE,
-  HIDE_FILES, REQUEST_TIMEOUT, SSL_VERSION, SSL_CIPHERS, NUM_OPTIONS
+  HIDE_FILES, REQUEST_TIMEOUT, SSL_VERSION, SSL_CIPHERS, SSL_CIPHERSUITES, NUM_OPTIONS
 };
 
 static const char *config_options[] = {
@@ -264,6 +265,7 @@ static const char *config_options[] = {
   "request_timeout_ms", "30000",
   "ssl_min_version", "tlsv1",
   "ssl_ciphers", NULL,
+  "ssl_ciphersuites", NULL,
   NULL
 };
 
@@ -3908,6 +3910,12 @@ static int set_ssl_option(struct sq_context *ctx) {
       return 0;
     }
     options |= (SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1);
+  } else if (sq_strcasecmp(ssl_version, "tlsv1.3") == 0) {
+    if (SSLeay() < OPENSSL_MIN_VERSION_WITH_TLS_1_3) {
+      cry(fc(ctx), "Unsupported TLS version: %s", ssl_version);
+      return 0;
+    }
+    options |= (SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2);
   } else {
     cry(fc(ctx), "%s: unknown SSL version: %s", __func__, ssl_version);
     return 0;
@@ -3957,11 +3965,36 @@ static int set_ssl_option(struct sq_context *ctx) {
     }
   }
 
-  if (ctx->config[SSL_CIPHERS] != NULL) {
-    if (SSL_CTX_set_cipher_list(ctx->ssl_ctx, ctx->config[SSL_CIPHERS]) != 1) {
-      cry(fc(ctx), "SSL_CTX_set_cipher_list: error setting ciphers (%s): %s",
-          ctx->config[SSL_CIPHERS], ssl_error());
-      return 0;
+  if (ctx->config[SSL_CIPHERS] != NULL || ctx->config[SSL_CIPHERSUITES] != NULL) {
+    // The sequence of SSL_CTX_set_ciphersuites() and SSL_CTX_set_cipher_list()
+    // calls below is essential to make sure the TLS engine ends up with usable,
+    // non-empty set of ciphers in case of early 1.1.1 releases of OpenSSL (like
+    // OpenSSL 1.1.1 shipped with Ubuntu 18).
+    //
+    // The SSL_CTX_set_ciphersuites() call cares only about TLSv1.3 ciphers, and
+    // those might be none. From the other side, the implementation of
+    // SSL_CTX_set_cipher_list() verifies that the overall result list of
+    // ciphers is valid and usable, reporting an error otherwise.
+    //
+    // If the sequence is reversed, no error would be reported from
+    // TlsContext::Init() in case of empty list of ciphers for some early-1.1.1
+    // releases of OpenSSL. That's because SSL_CTX_set_cipher_list() would see a
+    // non-empty list of default TLSv1.3 ciphers when given an empty list of
+    // TLSv1.2 ciphers, and SSL_CTX_set_ciphersuites() would allow an empty set
+    // of TLSv1.3 ciphers in a subsequent call.
+    if (ctx->config[SSL_CIPHERSUITES] != NULL) {
+      if (SSL_CTX_set_ciphersuites(ctx->ssl_ctx, ctx->config[SSL_CIPHERSUITES]) != 1) {
+        cry(fc(ctx), "SSL_CTX_set_ciphersuites: error setting ciphers (%s): %s",
+            ctx->config[SSL_CIPHERSUITES], ssl_error());
+        return 0;
+      }
+    }
+    if (ctx->config[SSL_CIPHERS] != NULL) {
+      if (SSL_CTX_set_cipher_list(ctx->ssl_ctx, ctx->config[SSL_CIPHERS]) != 1) {
+        cry(fc(ctx), "SSL_CTX_set_cipher_list: error setting ciphers (%s): %s",
+            ctx->config[SSL_CIPHERS], ssl_error());
+        return 0;
+      }
     }
 #ifndef OPENSSL_NO_ECDH
 #if OPENSSL_VERSION_NUMBER < 0x10002000L
