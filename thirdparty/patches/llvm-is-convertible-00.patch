commit 484e64f7e7b2c0494d7b2dbfdd528bcd707ee652
Author: Roland McGrath <mcgrathr@google.com>
Date:   Thu Apr 27 14:18:18 2023 -0700

    [libc++] Use __is_convertible built-in when available
    
    https://github.com/llvm/llvm-project/issues/62396 reports that
    GCC 13 barfs on parsing <type_traits> because of the declarations
    of `struct __is_convertible`.  In GCC 13, `__is_convertible` is a
    built-in, but `__is_convertible_to` is not.  Clang has both, so
    using either should be fine.
    
    Reviewed By: #libc, philnik
    
    Differential Revision: https://reviews.llvm.org/D149313

projects/libcxx/include/type_traits
diff --git a/projects/libcxx/include/type_traits b/projects/libcxx/include/type_traits
index 873a64b5a486..749d6fd47af9 100644
--- a/projects/libcxx/include/type_traits
+++ b/projects/libcxx/include/type_traits
@@ -1733,11 +1733,18 @@
 
 // is_convertible
 
-#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+#if __has_builtin(__is_convertible) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+
+template <class _T1, class _T2>
+struct _LIBCPP_TEMPLATE_VIS is_convertible : public integral_constant<bool, __is_convertible(_T1, _T2)> {};
+
+#elif __has_builtin(__is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
 
 template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
     : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};
 
+// TODO: Remove this fallback when GCC < 13 support is no longer required.
+// GCC 13 has the __is_convertible built-in.
 #else  // __has_feature(is_convertible_to)
 
 namespace __is_convertible_imp
