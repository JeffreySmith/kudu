# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Find Flatbuffers
#
# This module defines
#  FLATBUFFERS_INCLUDE_DIR, directory containing headers
#  FLATBUFFERS_SHARED_LIB, path to Flatbuffers shared library
#  FLATBUFFERS_STATIC_LIB, path to Flatbuffers static library
#  FLATBUFFERS_FLATC_EXECUTABLE - the Flatbuffers compiler (flatc)
#  FLATBUFFERS_FOUND, whether flatbuffers has been found

find_path(FLATBUFFERS_INCLUDE_DIR flatbuffers/flatbuffers.h
  NO_CMAKE_SYSTEM_PATH
  NO_SYSTEM_ENVIRONMENT_PATH)
find_library(FLATBUFFERS_SHARED_LIBRARY flatbuffers
  NO_CMAKE_SYSTEM_PATH
  NO_SYSTEM_ENVIRONMENT_PATH)
find_library(FLATBUFFERS_STATIC_LIBRARY libflatbuffers.a
  NO_CMAKE_SYSTEM_PATH
  NO_SYSTEM_ENVIRONMENT_PATH)

find_program(FLATBUFFERS_FLATC_EXECUTABLE flatc
  DOC "The Google Flatbuffers Compiler"
  NO_CMAKE_SYSTEM_PATH
  NO_SYSTEM_ENVIRONMENT_PATH)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Flatbuffers REQUIRED_VARS
  FLATBUFFERS_SHARED_LIBRARY
  FLATBUFFERS_STATIC_LIBRARY
  FLATBUFFERS_INCLUDE_DIR
  FLATBUFFERS_FLATC_EXECUTABLE)

#
#   FLATBUFFERS_GENERATE_CPP(FBS_HDRS FBS_TGTS
#     [SOURCE_ROOT <root from which source is found>]
#     [BINARY_ROOT <root into which binaries are built>]
#     FBS_FILES foo.fbs)
#   add_executable(bar bar.cc ${FBS_HDRS})
#   target_link_libraries(bar ${FLATBUFFERS_SHARED_LIBRARY})
#
#  ====================================================================
#
# FLATBUFFERS_GENERATE_CPP (public function)
#   HDRS = Variable to define with autogenerated
#          header files
#   TGTS = Variable to define with autogenerated
#          custom targets; if HDRS need to be used in multiple libraries,
#          those libraries should depend on these targets
#          in order to "serialize" the flatc invocations
#  ====================================================================

function(FLATBUFFERS_GENERATE_CPP HDRS TGTS)
  if(NOT ARGN)
    message(SEND_ERROR "Error: FLATBUFFERS_GENERATE_CPP() called without any .fbs files")
    return()
  endif(NOT ARGN)

  set(options)
  set(one_value_args SOURCE_ROOT BINARY_ROOT)
  set(multi_value_args FBS_FILES)
  cmake_parse_arguments(ARG "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})
  if(ARG_UNPARSED_ARGUMENTS)
    message(SEND_ERROR "Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}")
  endif()

  set(${HDRS})
  set(${TGTS})

  if("${ARG_SOURCE_ROOT}" STREQUAL "")
    SET(ARG_SOURCE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")
  endif()
  GET_FILENAME_COMPONENT(ARG_SOURCE_ROOT ${ARG_SOURCE_ROOT} ABSOLUTE)

  if("${ARG_BINARY_ROOT}" STREQUAL "")
    SET(ARG_BINARY_ROOT "${CMAKE_CURRENT_BINARY_DIR}")
  endif()
  GET_FILENAME_COMPONENT(ARG_BINARY_ROOT ${ARG_BINARY_ROOT} ABSOLUTE)

  foreach(FIL ${ARG_FBS_FILES})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)

    # Ensure that the Flatbuffers file is within the source root.
    FILE(RELATIVE_PATH FBS_REL_TO_ROOT "${ARG_SOURCE_ROOT}" "${ABS_FIL}")

    GET_FILENAME_COMPONENT(REL_DIR "${FBS_REL_TO_ROOT}" PATH)

    if(NOT REL_DIR STREQUAL "")
      SET(REL_DIR "${REL_DIR}/")
    endif()

    set(FBS_H_OUT "${ARG_BINARY_ROOT}/${REL_DIR}${FIL_WE}.fb.h")
    list(APPEND ${HDRS} "${FBS_H_OUT}")

    add_custom_command(
      OUTPUT "${FBS_H_OUT}"
      COMMAND ${FLATBUFFERS_FLATC_EXECUTABLE}
      ARGS
        --cpp
        --cpp-std c++17
        --filename-suffix .fb
        -o ${ARG_BINARY_ROOT}/${REL_DIR}
        ${ABS_FIL}
      DEPENDS ${ABS_FIL}
      COMMENT "Running C++ Flatbuffers compiler on ${FIL}"
      VERBATIM)

    # This custom target enforces that there's just one invocation of flatc
    # when there are multiple consumers of the generated files. The target name
    # must be unique; adding parts of the filename helps ensure this.
    string(MAKE_C_IDENTIFIER "${REL_DIR}${FIL}" TGT_NAME)
    add_custom_target(${TGT_NAME}
      DEPENDS "${FBS_H_OUT}")
    list(APPEND ${TGTS} "${TGT_NAME}")
  endforeach()

  set_source_files_properties(${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
  set(${TGTS} ${${TGTS}} PARENT_SCOPE)

  # The 'fb-gen' is a high-level target in $KUDU_ROOT/CMakeLists.txt to
  # process Flatbuffers definitions and generate corresponding files.
  add_dependencies(fb-gen ${${TGTS}})
endfunction()
